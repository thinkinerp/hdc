<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.intfocus.hdk.dao.ProjectMapper" >
  <resultMap id="BaseResultMap" type="com.intfocus.hdk.vo.Project" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="pro_id" property="proId" jdbcType="VARCHAR" />
    <result column="pro_name" property="proName" jdbcType="VARCHAR" />
    <result column="pro_edition" property="proEdition" jdbcType="VARCHAR" />
    <result column="pro_station" property="proStation" jdbcType="VARCHAR" />
    <result column="pro_manager_pro" property="proManagerPro" jdbcType="VARCHAR" />
    <result column="pro_manager_acc" property="proManagerAcc" jdbcType="VARCHAR" />
    <result column="pro_engineer" property="proEngineer" jdbcType="VARCHAR" />
    <result column="pro_operator" property="proOperator" jdbcType="VARCHAR" />
    <result column="pro_coordination" property="proCoordination" jdbcType="VARCHAR" />
    <result column="pro_coordination_phone" property="proCoordinationPhone" jdbcType="VARCHAR" />
    <result column="pro_updata_time" property="proUpdataTime" jdbcType="VARCHAR" />
    <result column="problem_object" property="problemObject" jdbcType="VARCHAR" />
    <result column="problem_type" property="problemType" jdbcType="VARCHAR" />
    <result column="pro_todal" property="proTodal" jdbcType="INTEGER" />
    <result column="pro_need" property="proNeed" jdbcType="INTEGER" />
    <result column="pro_already" property="proAlready" jdbcType="INTEGER" />
    <result column="pro_already_per" property="proAlreadyPer" jdbcType="VARCHAR" />
    <result column="pro_check" property="proCheck" jdbcType="INTEGER" />
    <result column="pro_check_per" property="proCheckPer" jdbcType="VARCHAR" />
    <result column="pro_customer_relationship" property="proCustomerRelationship" jdbcType="VARCHAR" />
    <result column="left_num" property="leftNum" jdbcType="INTEGER" />
    <result column="count" property="Count" jdbcType="VARCHAR" />
    <result column="pro_not" property="proNot" jdbcType="INTEGER" />
    <result column="is_last" property="isLast" jdbcType="INTEGER" />
    <result column="created_at" property="createdAt" jdbcType="VARCHAR" />
    <result column="updated_at" property="updatedAt" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, pro_id, pro_name, pro_edition, pro_station, pro_manager_pro, pro_manager_acc, 
    pro_engineer, pro_coordination, pro_coordination_phone, pro_updata_time, pro_todal, 
    pro_need, pro_already, pro_check, pro_not, created_at, updated_at,is_last,pro_customer_relationship,pro_operator
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from project
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByWhere" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select 
    <include refid="Base_Column_List" />
    from project
        	<where>
    	1=1
    		<if test="null != isLast  and '' != isLast">
				and is_last = #{isLast,jdbcType=INTEGER}
			</if>	
    		<if test="null != proName  and '' != proName">
				and pro_name = #{proName,jdbcType=VARCHAR}
			</if>	
			
    		<if test="null != proNameLike  and '' != proNameLike">
				and pro_name rlike #{proNameLike,jdbcType=VARCHAR}
			</if>	
			
			
    		<if test="null != proManagerPro  and '' != proManagerPro">
				and pro_manager_pro = #{proManagerPro,jdbcType=VARCHAR}
			</if>	
    		<if test="null != proId  and '' !=  proId">
				and pro_id = #{ proId,jdbcType=VARCHAR}
			</if>	
    </where>    
    
    <if test="null != page and ''!= page">
	    <if test="null != pageSize and ''!= pageSize">
			limit 	#{page,jdbcType=VARCHAR}, #{pageSize,jdbcType=VARCHAR}		    	
	    </if>
    </if>
  </select>
  
   
    <select id="getProjectProblem" resultMap="BaseResultMap" parameterType="java.util.Map" >
		   select pm.problem_object , pm.problem_type , COUNT(distinct pm.problem_id) as count
		    from project as p 
    inner join problem as pm on p.pro_id = pm.pro_id 
	<where>
    	1=1
    		<if test="null != proName  and '' != proName">
				and pro_name = #{proName,jdbcType=VARCHAR}
			</if>	
    		<if test="null != proId  and '' != proId">
				and p.pro_id = #{proId,jdbcType=VARCHAR}
			</if>	
</where>    
group by pm.problem_object , pm.problem_type
  </select>
  
      <select id="getEquipment" resultMap="BaseResultMap" parameterType="java.util.Map" >
    
   select e.eq_type as  problem_object, count(e.eq_id) as count
    from project as p 
inner join equipment as e on p.pro_id = e.pro_id
	<where>
    	1=1
    		<if test="null != proName  and '' != proName">
				and pro_name = #{proName,jdbcType=VARCHAR}
			</if>	
			
			    <if test="null != proId  and '' != proId">
				and p.pro_id = #{proId,jdbcType=VARCHAR}
			</if>	
</where>    
 	group by e.eq_type
  </select>
      <select id="getCashCount" resultMap="BaseResultMap" parameterType="java.util.Map" >
   select  c.cash_port as problem_object , count(c.cash_id) as count
    from project as p 
inner join install as i on i.pro_id = p.pro_id
inner join cash as c on i.cash_id = c.cash_id
	<where>
    	1=1
    		<if test="null != proName  and '' != proName">
				and pro_name = #{proName,jdbcType=VARCHAR}
			</if>	
			
						    <if test="null != proId  and '' != proId">
				and p.pro_id = #{proId,jdbcType=VARCHAR}
			</if>	
</where>    
group by  c.cash_port 
  </select>

      <select id="getProjectSummarise" resultMap="BaseResultMap" parameterType="java.util.Map" >
			    select
			            p.pro_name
			           ,p.pro_edition
			           ,p.pro_station
			           ,p.pro_manager_pro
			           ,p.pro_coordination
			           ,p.pro_coordination_phone
			           ,p.pro_updata_time  
			           ,p.pro_todal 
			           ,p.pro_need
			           ,pro_manager_acc
			           ,pro_engineer
			           ,pro_customer_relationship
			           ,pro_operator
			           ,already.install_data as pro_already
				   ,checked.install_data as pro_check
				   ,offline.install_data as pro_not
			      from project as p 
			 left join (
				    select count(i.install_id) as install_data
				      from project as p 
				inner join install as i on i.pro_id = p.pro_id
				where  i.install_station = '已安装'
				    		<if test="null != proName  and '' != proName">
								and p.pro_name = #{proName,jdbcType=VARCHAR}
							</if>	
							<if test="null != proId  and '' != proId">
								and p.pro_id = #{proId,jdbcType=VARCHAR}
							</if>	 
			           ) as already on 1=1
			 left join (
				    select count(i.install_id) as install_data
				      from project as p 
				inner join install as i on i.pro_id = p.pro_id
				where  i.install_station = '已验收' 	
				    		<if test="null != proName  and '' != proName">
								and p.pro_name = #{proName,jdbcType=VARCHAR}
							</if>	
							<if test="null != proId  and '' != proId">
								and p.pro_id = #{proId,jdbcType=VARCHAR}
							</if>	
				   ) as checked on 1=1 
			 left join (
				    select count(i.install_id) as install_data
				      from project as p 
				inner join install as i on i.pro_id = p.pro_id
				where  i.install_station &lt;&gt;  '已安装' 	
				    		<if test="null != proName  and '' != proName">
								and p.pro_name = #{proName,jdbcType=VARCHAR}
							</if>	
							<if test="null != proId  and '' != proId">
								and p.pro_id = #{proId,jdbcType=VARCHAR}
							</if>	
				   ) as offline on 1=1
					<where>
						1=1
				    		<if test="null != proName  and '' != proName">
								and p.pro_name = #{proName,jdbcType=VARCHAR}
							</if>	
							<if test="null != proId  and '' != proId">
								and p.pro_id = #{proId,jdbcType=VARCHAR}
							</if>	
	
					</where>	
	  </select>
	  
      <select id="getCheck" resultMap="BaseResultMap" parameterType="java.util.Map" >
	select concat(c.pro_check,'/', project.pro_need) as pro_already_per 
	,concat(b.pro_already,'/',project.pro_need) as pro_check_per 
	,concat(a.install_data,'/',project.pro_need) as count ,a.install_data,b.pro_already
	,p.pro_todal ,p.pro_need ,b.pro_already ,c.pro_check ,(p.pro_need - b.pro_already - c.pro_check) as left_num 
	  from project as p 
	left join 
	(
	SELECT COUNT(1) as pro_need FROM INSTALL a,project b
	WHERE a.pro_id =b.pro_id
    		<if test="null != proName  and '' != proName">
				and b.pro_name = #{proName,jdbcType=VARCHAR}
			</if>	
			<if test="null != proId  and '' != proId">
				and b.pro_id = #{proId,jdbcType=VARCHAR}
			</if>	
) as project on 1=1
left join (
    select count(i.install_id) as install_data
      from project as p 
inner join install as i on i.pro_id = p.pro_id
where  i.install_data = '准确' 
    		<if test="null != proName  and '' != proName">
				and p.pro_name = #{proName,jdbcType=VARCHAR}
			</if>	
			<if test="null != proId  and '' != proId">
				and p.pro_id = #{proId,jdbcType=VARCHAR}
			</if>	
) as a on 1=1
left join (
    select count(i.install_id) as pro_already
      from project as p
inner join install as i on i.pro_id = p.pro_id
where  i.install_station   &lt;&gt; '未安装'
    		<if test="null != proName  and '' != proName">
				and p.pro_name = #{proName,jdbcType=VARCHAR}
			</if>	
			<if test="null != proId  and '' != proId">
				and p.pro_id = #{proId,jdbcType=VARCHAR}
			</if>	
) as b on 1=1 
left join (
    select count(i.install_id) as pro_check
      from project as p
inner join install as i on i.pro_id = p.pro_id
where  i.install_station = '已验收' 
    		<if test="null != proName  and '' != proName">
				and p.pro_name = #{proName,jdbcType=VARCHAR}
			</if>	
									    <if test="null != proId  and '' != proId">
				and p.pro_id = #{proId,jdbcType=VARCHAR}
			</if>	
) as c on 1=1 
	<where>
    	1=1
    		<if test="null != proName  and '' != proName">
				and pro_name = #{proName,jdbcType=VARCHAR}
			</if>	
									    <if test="null != proId  and '' != proId">
				and pro_id = #{proId,jdbcType=VARCHAR}
			</if>	
</where>    
  </select>
  

 <select id="selectProjectCount" resultType="java.util.Map" >
select count_type , pro_count
  from 
	(
		select '合计' as count_type , count(distinct pro_id) as pro_count
		  from project 
		union
		select pro_station , count(distinct pro_id)
		from project
		group by pro_station
	) as a
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from project
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.intfocus.hdk.vo.Project" >
    insert into project (id, pro_id, pro_name, 
      pro_edition, pro_station, pro_manager_pro, 
      pro_manager_acc, pro_engineer, pro_coordination, 
      pro_coordination_phone, pro_updata_time, 
      pro_todal, pro_need, pro_already, 
      pro_check, pro_not, created_at, 
      updated_at)
    values (#{id,jdbcType=INTEGER}, #{proId,jdbcType=VARCHAR}, #{proName,jdbcType=VARCHAR}, 
      #{proEdition,jdbcType=VARCHAR}, #{proStation,jdbcType=VARCHAR}, #{proManagerPro,jdbcType=VARCHAR}, 
      #{proManagerAcc,jdbcType=VARCHAR}, #{proEngineer,jdbcType=VARCHAR}, #{proCoordination,jdbcType=VARCHAR}, 
      #{proCoordinationPhone,jdbcType=VARCHAR}, #{proUpdataTime,jdbcType=TIMESTAMP}, 
      #{proTodal,jdbcType=INTEGER}, #{proNeed,jdbcType=INTEGER}, #{proAlready,jdbcType=INTEGER}, 
      #{proCheck,jdbcType=INTEGER}, #{proNot,jdbcType=INTEGER}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedAt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.intfocus.hdk.vo.Project" >
    insert into project
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="proId != null" >
        pro_id,
      </if>
      <if test="proName != null" >
        pro_name,
      </if>
      <if test="proEdition != null" >
        pro_edition,
      </if>
      <if test="proStation != null" >
        pro_station,
      </if>
      <if test="proManagerPro != null" >
        pro_manager_pro,
      </if>
      <if test="proManagerAcc != null" >
        pro_manager_acc,
      </if>
      <if test="proEngineer != null" >
        pro_engineer,
      </if>
      <if test="proCoordination != null" >
        pro_coordination,
      </if>
      <if test="proCoordinationPhone != null" >
        pro_coordination_phone,
      </if>
      <if test="proUpdataTime != null" >
        pro_updata_time,
      </if>
      <if test="proTodal != null" >
        pro_todal,
      </if>
      <if test="proNeed != null" >
        pro_need,
      </if>
      <if test="proAlready != null" >
        pro_already,
      </if>
      <if test="proCheck != null" >
        pro_check,
      </if>
      <if test="proNot != null" >
        pro_not,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
      <if test="updatedAt != null" >
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="proId != null" >
        #{proId,jdbcType=VARCHAR},
      </if>
      <if test="proName != null" >
        #{proName,jdbcType=VARCHAR},
      </if>
      <if test="proEdition != null" >
        #{proEdition,jdbcType=VARCHAR},
      </if>
      <if test="proStation != null" >
        #{proStation,jdbcType=VARCHAR},
      </if>
      <if test="proManagerPro != null" >
        #{proManagerPro,jdbcType=VARCHAR},
      </if>
      <if test="proManagerAcc != null" >
        #{proManagerAcc,jdbcType=VARCHAR},
      </if>
      <if test="proEngineer != null" >
        #{proEngineer,jdbcType=VARCHAR},
      </if>
      <if test="proCoordination != null" >
        #{proCoordination,jdbcType=VARCHAR},
      </if>
      <if test="proCoordinationPhone != null" >
        #{proCoordinationPhone,jdbcType=VARCHAR},
      </if>
      <if test="proUpdataTime != null" >
        #{proUpdataTime,jdbcType=TIMESTAMP},
      </if>
      <if test="proTodal != null" >
        #{proTodal,jdbcType=INTEGER},
      </if>
      <if test="proNeed != null" >
        #{proNeed,jdbcType=INTEGER},
      </if>
      <if test="proAlready != null" >
        #{proAlready,jdbcType=INTEGER},
      </if>
      <if test="proCheck != null" >
        #{proCheck,jdbcType=INTEGER},
      </if>
      <if test="proNot != null" >
        #{proNot,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null" >
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.intfocus.hdk.vo.Project" >
    update project
    <set >
      <if test="proId != null" >
        pro_id = #{proId,jdbcType=VARCHAR},
      </if>
      <if test="proName != null" >
        pro_name = #{proName,jdbcType=VARCHAR},
      </if>
      <if test="proEdition != null" >
        pro_edition = #{proEdition,jdbcType=VARCHAR},
      </if>
      <if test="proStation != null" >
        pro_station = #{proStation,jdbcType=VARCHAR},
      </if>
      <if test="proManagerPro != null" >
        pro_manager_pro = #{proManagerPro,jdbcType=VARCHAR},
      </if>
      <if test="proManagerAcc != null" >
        pro_manager_acc = #{proManagerAcc,jdbcType=VARCHAR},
      </if>
      <if test="proEngineer != null" >
        pro_engineer = #{proEngineer,jdbcType=VARCHAR},
      </if>
      <if test="proCoordination != null" >
        pro_coordination = #{proCoordination,jdbcType=VARCHAR},
      </if>
      <if test="proCoordinationPhone != null" >
        pro_coordination_phone = #{proCoordinationPhone,jdbcType=VARCHAR},
      </if>
      <if test="proUpdataTime != null" >
        pro_updata_time = #{proUpdataTime,jdbcType=TIMESTAMP},
      </if>
      <if test="proTodal != null" >
        pro_todal = #{proTodal,jdbcType=INTEGER},
      </if>
      <if test="proNeed != null" >
        pro_need = #{proNeed,jdbcType=INTEGER},
      </if>
      <if test="proAlready != null" >
        pro_already = #{proAlready,jdbcType=INTEGER},
      </if>
      <if test="proCheck != null" >
        pro_check = #{proCheck,jdbcType=INTEGER},
      </if>
      <if test="proNot != null" >
        pro_not = #{proNot,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="isLast != null" >
        is_last = #{isLast,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <update id ="setAllNotIsLast" >
  	update project 
  	    set is_last = 0
  </update>
  
  <update id="updateByPrimaryKey" parameterType="com.intfocus.hdk.vo.Project" >
    update project
    set pro_id = #{proId,jdbcType=VARCHAR},
      pro_name = #{proName,jdbcType=VARCHAR},
      pro_edition = #{proEdition,jdbcType=VARCHAR},
      pro_station = #{proStation,jdbcType=VARCHAR},
      pro_manager_pro = #{proManagerPro,jdbcType=VARCHAR},
      pro_manager_acc = #{proManagerAcc,jdbcType=VARCHAR},
      pro_engineer = #{proEngineer,jdbcType=VARCHAR},
      pro_coordination = #{proCoordination,jdbcType=VARCHAR},
      pro_coordination_phone = #{proCoordinationPhone,jdbcType=VARCHAR},
      pro_updata_time = #{proUpdataTime,jdbcType=TIMESTAMP},
      pro_todal = #{proTodal,jdbcType=INTEGER},
      pro_need = #{proNeed,jdbcType=INTEGER},
      pro_already = #{proAlready,jdbcType=INTEGER},
      pro_check = #{proCheck,jdbcType=INTEGER},
      pro_not = #{proNot,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>